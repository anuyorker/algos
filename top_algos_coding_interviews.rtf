{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11200\viewh14520\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 1. Tree Traversal
\b0 \
- preorder\
- inorder\
- post-order\
- BFS\
- DFS\
- binary search\
- use data structures to represent a tree (left and right node)\
	all you need to represent is a node with children nodes\
\

\b 2. Recursion
\b0 \
- need helper functions\
- recursive program calls the helper function and passes a set of initialization variables\
- think about the base case\
- every recursive algorithm can be converted into an iterative function (using stacks or queues)\
- try it with problems like Fibonacci or Tree Traversal\
\

\b 3. Stacks & Queues
\b0 \
- common question: given a string of parentheses, check if they\'92re balanced\
\

\b 4. OOP\

\b0 - for whichever language you use, make sure you know how to:\
	* create a class\
	* set up methods, private variables, and public variables\
\
- Think about what potential data structures you may need, and 
\b if you can create a class for that
\b0 \
\

\b 5. Hash Maps\

\b0 - if you happen to get stuck, start to think about hash maps, stacks, and queues; these will be involved in any optimal solution\
- understand how to use them in JS\
- should be able to create hash maps of other hash maps\
- should understand how to create a hashing function\
- TwoSum problem\
\

\b 6. Dynamic Programming
\b0 \
- know the basics, but don\'92t waste too much time studying it\
- basically it\'92s just memoization and caching values, solving subproblems, and then reusing the results of those subproblems \
\
\
}